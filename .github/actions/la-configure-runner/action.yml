name: 'Configure LA Runner'
description: 'Configure the runner to build LA lib/app'
inputs:
  os:
    description: 'The operating system to configure the runner'
    required: true
  
runs:
  using: "composite"
  steps:
    - name: Check support
      shell: bash
      run: |
        supported_os=("linux" "windows" "macos")
        input_os=${{inputs.os}}
        if [[ ! " ${supported_os[@]} " =~ " $input_os " ]]; then
          echo "Error: Un-supported OS ${{inputs.os}}. Supported os values: ${supported_os[*]}."
          exit 1
        fi
        echo "Running on platform [$input_os]"

    # ----------------- Linux -----------------
    - name: Install dependencies
      if: inputs.os == 'linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget ninja-build build-essential libpcap-dev

    - name: Install CMake 
      if: inputs.os == 'linux' 
      shell: bash
      run: |
        set +xe
        which cmake &> /dev/null 
        if [ $? -ne 0 ]; then
          arch=$([ $(uname -m) = "arm64" ] && echo "aarch64" || echo "x86_64")
          cmake_script="cmake-3.31.5-linux-$arch.sh"
          wget "https://github.com/Kitware/CMake/releases/download/v3.31.5/$cmake_script"
          chmod +x $cmake_script
          sudo ./$cmake_script --skip-license --prefix=/usr/local
        fi
        CMAKE_VERSION=$(cmake --version | awk '/version/ {print $3}')
        echo "USING CMAKE: ${CMAKE_VERSION}"

    # ----------------- Windows -----------------
    - name: Install job dependencies
      if: inputs.os == 'windows'
      shell: bash
      run: |
        choco install -y grep
        CMAKE_VERSION=$(cmake --version | awk '/version/ {print $3}')
        echo "USING CMAKE: ${CMAKE_VERSION}"

    - name: Install winpcap
      if: inputs.os == 'windows'
      shell: bash
      run: |
        wpdpack_zip_name="WpdPack_4_1_2.zip"
        winpcap_url="https://www.winpcap.org/install/bin/$wpdpack_zip_name"
        winpcap_ext_dir="${{github.workspace}}/externals/3rdparty/winpcap"
        if [ ! -d $winpcap_ext_dir ]; then
          mkdir --parent $winpcap_ext_dir
        fi
        curl -O $winpcap_url
        unzip $wpdpack_zip_name -d _winpcap
        mv _winpcap/WpdPack/Include $winpcap_ext_dir/Include
        mv _winpcap/WpdPack/Lib $winpcap_ext_dir/Lib

    - name: Configure compiler and generator cli
      if: inputs.os == 'windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    # ----------------- macOS -----------------
    - name: Install job dependencies
      if: inputs.os == 'macos'
      shell: bash
      run : |
        brew install ninja
        brew install wget
        brew install bash
        brew install grep
        echo "$(brew --prefix grep)/libexec/gnubin" >> $GITHUB_PATH

    - name: Install CMake
      if: inputs.os == 'macos'
      shell: bash
      run : |
        set -xe # exit on first error
        which cmake &> /dev/null 
        CMAKE_VERSION=$(cmake --version | awk '/version/ {print $3}')
        echo "USING CMAKE: ${CMAKE_VERSION}"
