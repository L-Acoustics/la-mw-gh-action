name: Commit stage

on :
  workflow_call:
    secrets:
      GH_TOKEN:
      APPLE_CERTIFICATES_P12_BASE64_PASSWORD:
      APPLE_CERTIFICATES_P12_BASE64:
      KEYCHAIN_PASSWORD:
    inputs:
      WINPCAP_ROOT_DESTINATION:
        type: string
        default: "."
      ALTERNATIVE_BASHUTILS_PATH:
        type: string
        default: "."
permissions:
  contents: write
  actions: read
  pull-requests: write
  checks: write
  packages: write

env:
  APPLE_CERTIFICATES_P12_BASE64_PASSWORD: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64_PASSWORD }}
  APPLE_CERTIFICATES_P12_BASE64: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64 }}
  KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

jobs:
  pre-workflow-checks:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.config-matrix.outputs.matrix }}
      LIB_NAME: ${{ steps.set-config.outputs.LIB_NAME }}
      MACOS_SIGNING_IDENTITY: ${{ steps.set-config.outputs.MACOS_SIGNING_IDENTITY }}
      GTEST_FILTER: ${{ steps.set-config.outputs.GTEST_FILTER }}
      INCLUDE_NUGET_LA_FEED: ${{ steps.set-config.outputs.INCLUDE_NUGET_LA_FEED }}
      NUGET_PUBLISH_FEED_URL: ${{ steps.set-config.outputs.NUGET_PUBLISH_FEED_URL }}
      WINPCAP_ROOT_DESTINATION: ${{ steps.set-config.outputs.WINPCAP_ROOT_DESTINATION }}
      ALTERNATIVE_BASHUTILS_PATH: ${{ steps.set-config.outputs.ALTERNATIVE_BASHUTILS_PATH }}

    steps:
      - uses: actions/checkout@v2
      - name: set environment
        id: set-config
        shell: bash
        run: |
          # # Required variables
          # Required so that the json string is parsed correctly
          build_config=${{vars.BUILD_CONFIG}}
          echo "BUILD_CONFIG=$build_config" >> $GITHUB_ENV

          required_variables=('"package_name"' '"macos_signing_identity"' '"runner_configs"')
          continue=0
          for var in "${required_variables[@]}"; do
              echo $build_config | jq --argjson k "$var" -e 'has($k) and .k != ""' > /dev/null || (echo "Configuration parameter $var is missing or is empty." && continue=1)
          done
          if [[ $continue = 1 ]]; then
            exit 1
          fi

          # Parse json string -c for compact output and -e for setting exit code
          lib_name=$(echo $build_config | jq -e -c '.package_name')
          macos_signing_identity=$(echo $build_config | jq -e -c '.macos_signing_identity')
          echo "LIB_NAME=$lib_name" >> $GITHUB_OUTPUT
          echo "MACOS_SIGNING_IDENTITY=$macos_signing_identity" >> $GITHUB_OUTPUT

          # # Optional variables using jq and echo-ing the fallback value if any errors during parsing.
          bashutils_dir=$(echo "$build_config" | jq -c -e 'if has("alternative_bashutils_path") then .alternative_bashutils_path else "." end')
          winpcap_dir=$(echo "$build_config" | jq -c -e 'if has("winpcap_destination_root") then .winpcap_destination_root else "." end')
          build_dir=$(echo "$build_config" | jq -c -e 'if has("build_directory") then .build_directory else "_build" end')
          gtest_filter=$(echo "$build_config" | jq -c -e 'if has("gtest_filter") then .gtest_filter else "*" end')
          include_nuget_la_feed=$(echo "$build_config" | jq -c -e 'if has("include_nuget_la_feed") then .include_nuget_la_feed else "false" end')
          nuget_publish_feed_url=$(echo "$build_config" | jq -c -e 'if has("nuget_publish_feed_url") then .nuget_publish_feed_url else "https://nuget.pkg.github.com/${{github.repository_owner}}/index.json" end')

          # Writting output so that it is available to sub-sequent jobs
          echo "GTEST_FILTER=$gtest_filter" >> $GITHUB_OUTPUT
          echo "INCLUDE_NUGET_LA_FEED=$include_nuget_la_feed" >> $GITHUB_OUTPUT
          echo "NUGET_PUBLISH_FEED_URL=$nuget_publish_feed_url" >> $GITHUB_OUTPUT
          echo "BUILD_DIR=$build_dir" >> $GITHUB_OUTPUT
          echo "WINPCAP_ROOT_DESTINATION=$winpcap_dir" >> $GITHUB_OUTPUT
          echo "ALTERNATIVE_BASHUTILS_PATH=$bashutils_dir" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Check secrets and set compute runners
        id: config-matrix
        run: |
          if [ -z "$BUILD_CONFIG" ]; then
            echo "Variable BUILD_CONFIG is not set or empty."
          fi
          runner_configs=$(echo "$BUILD_CONFIG" | jq -c '{include: [.runner_configs[] | [{config: "release"} + ., {config: "debug"} + .]] | flatten}')
          configs_count=$(echo $runner_configs | jq '.include | length')

          if [[ $configs_count < 1 ]]; then
            echo "No valid runner configuration found, please provide at least 1 configuration.\n\ne.g. "runner_configs":[{"labels":"ubuntu-22.04","arch":"x64"}]"
            exit 1
          fi

          echo "matrix=$runner_configs" >> "$GITHUB_OUTPUT"

          required_secrets=("APPLE_CERTIFICATES_P12_BASE64_PASSWORD" "APPLE_CERTIFICATES_P12_BASE64" "KEYCHAIN_PASSWORD")

          continue=0
          printf "\nChecking required secrets..."
          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              continue=1
              printf "\n‚ùå Secret '$secret' is not set or is empty."
            fi
          done
          if [ $continue = 0 ];then
            printf "ok.\n"
          fi
          exit $continue



  validate:
    needs: pre-workflow-checks
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install job dependencies
      shell: bash
      run: |
        choco install -y dos2unix jq
        curl https://www.kikisoft.com/Hive/clang-format/clang-format-7.0.0-LambdaPatch-windows.exe -o clang-format.exe
        ln -s $(pwd)/clang-format.exe /usr/bin/clang-format

    - name: Run fix_files
      shell: bash {0}
      run: |
        alternative_bashutils_path=${{needs.pre-workflow-checks.outputs.ALTERNATIVE_BASHUTILS_PATH}}
        $alternative_bashutils_path/scripts/bashUtils/fix_files.sh

    - name: Check for changes
      shell: bash
      run: |
        git diff --name-status --exit-code
        if [ $? -ne 0 ]; then
          echo "Some files need formatting/fixing. Please run the script and commit the changes."
          exit 1
        fi

  build-test:
    needs:
      - validate
      - pre-workflow-checks
    env:
      LC_ALL: en_US.UTF-8

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.pre-workflow-checks.outputs.matrix) }}
    runs-on: ${{matrix.labels}}
    name: Build-test (${{matrix.config}}, ${{matrix.labels}}, ${{matrix.arch}})
    steps:
    - name: test-matrix
      shell: bash
      run: |
        echo "Matrix values"
        echo "${{matrix.labels}}"
        echo "${{matrix.arch}}"

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: L-Acoustics/la-mw-gh-action/.github/actions/la-swig@main
      name: Install custom SWIG
      id: la_swig


    - name: Configure runner
      uses: L-Acoustics/la-mw-gh-action/.github/actions/la-configure-runner@main
      with:
        WINPCAP_ROOT_DESTINATION: ${{needs.pre-workflow-checks.outputs.WINPCAP_ROOT_DESTINATION}}
        APPLE_CERTIFICATES_P12_BASE64_PASSWORD: ${{secrets.APPLE_CERTIFICATES_P12_BASE64_PASSWORD}}
        APPLE_CERTIFICATES_P12_BASE64: ${{secrets.APPLE_CERTIFICATES_P12_BASE64}}
        KEYCHAIN_PASSWORD: ${{secrets.KEYCHAIN_PASSWORD}}
        setup_keychain: "true"

    - name: Build and Test Library
      uses: L-Acoustics/la-mw-gh-action/.github/actions/la-build@dev
      with:
        push_bindings: 'false'
        RUNNER_ARCH: ${{matrix.arch}}
        GTEST_FILTER: '${{needs.pre-workflow-checks.outputs.GTEST_FILTER}}'
        SWIG_EXEC: ${{steps.la_swig.outputs.swig_exec}}
        SWIG_DIR: ${{steps.la_swig.outputs.swig_dir}}
        BUILD_DIR: "${{needs.pre-workflow-checks.outputs.BUILD_DIR}}"
        include_nuget_la_feed_url:  "${{needs.pre-workflow-checks.outputs.INCLUDE_NUGET_LA_FEED}}"
        CONFIG: ${{matrix.config}}
        MACOS_SIGNING_IDENTITY: ${{needs.pre-workflow-checks.outputs.MACOS_SIGNING_IDENTITY}}
        NUGET_PUBLISH_FEED_URL: ${{needs.pre-workflow-checks.outputs.NUGET_PUBLISH_FEED_URL}}
        LIB_NAME: ${{needs.pre-workflow-checks.outputs.LIB_NAME}}
        GITHUB_TOKEN: ${{secrets.GH_TOKEN}}
