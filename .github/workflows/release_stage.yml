name: Release stage

on:
  workflow_call:
    secrets:
      GH_TOKEN:
      APPLE_CERTIFICATES_P12_BASE64_PASSWORD:
      APPLE_CERTIFICATES_P12_BASE64:
      KEYCHAIN_PASSWORD:
    inputs:
      WINPCAP_ROOT_DESTINATION:
        type: string
        default: "."
      ALTERNATIVE_BASHUTILS_PATH:
        type: string
        default: "."
      release_linux:
        description: 'Release the linux package'
        type: string
        default: 'true'
      release_windows:
        description: 'Release the windows package'
        type: string
        default: 'true'
      release_macos:
        description: 'Release the macos package'
        type: string
        default: 'true'
      create_gh_release:
        description: 'Create the Github Release'
        type: string
        default: 'false'

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write
  packages: write

jobs:
  pre-workflow-checks:
    runs-on: ubuntu-latest
    env:
      INCLUDE_NUGET_LA_FEED: ${{ vars.INCLUDE_NUGET_LA_FEED }}
      NUGET_PUBLISH_FEED_URL: ${{ vars.NUGET_PUBLISH_FEED_URL }}
      BUILD_DIR: ${{ vars.BUILD_DIR }}
      MACOS_SIGNING_IDENTITY: ${{ vars.MACOS_SIGNING_IDENTITY }}
      BUILD_WINDOWS: ${{ vars.BUILD_WINDOWS }}
      BUILD_MACOS: ${{ vars.BUILD_MACOS }}
      BUILD_LINUX: ${{ vars.BUILD_LINUX }}
      RELEASE_MACOS: ${{ vars.RELEASE_MACOS }}
      RELEASE_WINDOWS: ${{ vars.RELEASE_WINDOWS }}
      RELEASE_LINUX: ${{ vars.RELEASE_LINUX }}
      GTEST_FILTER: ${{ vars.GTEST_FILTER }}
      LIB_NAME: ${{ vars.LIB_NAME }}
      RUNNER_LABELS_MACOS: ${{ vars.RUNNER_LABELS_MACOS }}
      RUNNER_LABELS_WINDOWS: ${{ vars.RUNNER_LABELS_WINDOWS }}
      RUNNER_LABELS_LINUX: ${{ vars.RUNNER_LABELS_LINUX }}
      APPLE_CERTIFICATES_P12_BASE64_PASSWORD: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64_PASSWORD }}
      APPLE_CERTIFICATES_P12_BASE64: ${{ secrets.APPLE_CERTIFICATES_P12_BASE64 }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    steps:
      - name: Correct secrets and repository variables
        run: |
          required_vars=("BUILD_DIR" "MACOS_SIGNING_IDENTITY" "BUILD_WINDOWS" "BUILD_MACOS" "BUILD_LINUX" "RELEASE_MACOS" "RELEASE_WINDOWS" "RELEASE_LINUX" "GTEST_FILTER" "LIB_NAME" "RUNNER_LABELS_MACOS" "RUNNER_LABELS_WINDOWS" "RUNNER_LABELS_LINUX" "NUGET_PUBLISH_FEED_URL" "INCLUDE_NUGET_LA_FEED")
          required_secrets=("APPLE_CERTIFICATES_P12_BASE64_PASSWORD" "APPLE_CERTIFICATES_P12_BASE64" "KEYCHAIN_PASSWORD")

          printf "Checking required vars..."
          continue=0
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              continue=1
              printf "\n❌ Variable '$var' is not set or is empty."
            fi
          done
          if [ $continue = 0 ];then
            printf "ok.\n"
          fi

          printf "\nChecking required secrets..."
          for secret in "${required_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              continue=1
              printf "\n❌ Secret '$secret' is not set or is empty."
            fi
          done
          if [ $continue = 0 ];then
            printf "ok.\n"
          fi
          exit $continue
  validate:
    runs-on: windows-2022
    needs: pre-workflow-checks
    outputs:
      runners: ${{ steps.runners-matrix.outputs.runners }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install job dependencies
      shell: bash
      run: |
        choco install -y dos2unix
        curl https://www.kikisoft.com/Hive/clang-format/clang-format-7.0.0-LambdaPatch-windows.exe -o clang-format.exe
        ln -s $(pwd)/clang-format.exe /usr/bin/clang-format

    - name: Run fix_files
      shell: bash {0}
      run: |
        alternative_bashutils_path=${{inputs.ALTERNATIVE_BASHUTILS_PATH}}
        $alternative_bashutils_path/scripts/bashUtils/fix_files.sh

    - name: Check for changes
      shell: bash
      run: |
        git diff --name-status --exit-code
        if [ $? -ne 0 ]; then
          echo "Some files need formatting/fixing. Please run the script and commit the changes."
          exit 1
        fi
    - name: prepare-runners-matrix
      id: runners-matrix
      shell: bash
      run: |
        macos=$(([ ${{vars.RELEASE_MACOS}} = "true"  ] || [ ${{inputs.RELEASE_MACOS}} = "true" ]) && jq -n --argjson r '${{vars.RUNNER_LABELS_MACOS}}' '$r' || echo '""')
        echo $macos
        linux=$(([ ${{vars.RELEASE_LINUX}} = "true"  ] || [ ${{inputs.RELEASE_LINUX}} = "true" ]) && jq -n --argjson r '${{vars.RUNNER_LABELS_LINUX}}' '$r' || echo '""')
        echo $linux
        windows=$(([ ${{vars.RELEASE_WINDOWS}} = "true"  ] || [ ${{inputs.RELEASE_WINDOWS}} = "true" ]) && jq -n --argjson r '${{vars.RUNNER_LABELS_WINDOWS}}' '$r' || echo '""')
        echo $windows

        runners=$(jq -n --argjson m "$macos" --argjson l "$linux" --argjson w "$windows" '[$m,$l,$w]' | jq 'del(.[] | select(. == ""))' | tr -d '\n' )
        echo $runners
        if [ $runners = "[]" ]; then
          echo "No platform selected, either set one of repository variable RELEASE_{OS} to 'true' or use the manual workflow trigger and select at least one platform."
          exit 1
        fi
        echo "runners=$runners" >> "$GITHUB_OUTPUT"

  release:

    needs: validate
    env:
      LC_ALL: en_US.UTF-8

    strategy:
      fail-fast: false
      matrix:
        config:
          - release
        runner-label: ${{ fromJSON(needs.validate.outputs.runners) }}

    runs-on: ${{matrix.runner-label}}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: L-Acoustics/la-mw-gh-action/.github/actions/la-swig@main
      name: Install custom SWIG
      id: la_swig


    - name: Configure runner
      uses: L-Acoustics/la-mw-gh-action/.github/actions/la-configure-runner@main
      with:
        WINPCAP_ROOT_DESTINATION: ${{inputs.WINPCAP_ROOT_DESTINATION}}
        APPLE_CERTIFICATES_P12_BASE64_PASSWORD: ${{secrets.APPLE_CERTIFICATES_P12_BASE64_PASSWORD}}
        APPLE_CERTIFICATES_P12_BASE64: ${{secrets.APPLE_CERTIFICATES_P12_BASE64}}
        KEYCHAIN_PASSWORD: ${{secrets.KEYCHAIN_PASSWORD}}
        setup_keychain: "true"


    - name: Build, Test, Push Library
      uses: L-Acoustics/la-mw-gh-action/.github/actions/la-build@main
      with:
        push_bindings: 'true'
        GTEST_FILTER: '${{vars.GTEST_FILTER}}'
        SWIG_EXEC: ${{steps.la_swig.outputs.swig_exec}}
        SWIG_DIR: ${{steps.la_swig.outputs.swig_dir}}
        BUILD_DIR: "${{vars.BUILD_DIR}}"
        MACOS_SIGNING_IDENTITY: ${{vars.MACOS_SIGNING_IDENTITY}}
        include_nuget_la_feed_url: ${{vars.INCLUDE_NUGET_LA_FEED}}
        CONFIG: ${{matrix.config}}
        NUGET_PUBLISH_FEED_URL: ${{vars.NUGET_PUBLISH_FEED_URL}}
        LIB_NAME: "${{vars.LIB_NAME}}"
        GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    - name: Release
      uses: softprops/action-gh-release@v2
      if: github.ref_type == 'tag' || inputs.create_gh_release == 'true'
      with:
        prerelease: ${{ contains(github.ref_name, 'beta') }}
